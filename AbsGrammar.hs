

module AbsGrammar where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [Stmt]
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = BStmt Block
    | Decl Type Item
    | Ass Ident Expr
    | Ret Expr
    | VRet
    | Cond Expr Block
    | CondElse Expr Block Block
    | While Expr Stmt
    | For Ident Expr Expr Stmt
    | ForIn Ident Expr Stmt
    | Print Expr
    | SFormat String [Expr]
    | SExp Expr
    | FnDef Ident [Arg] Type Block
    | ListPush Ident Expr
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Type Ident | RefArg Type Ident
  deriving (Eq, Ord, Show, Read)

data Type
    = TInt
    | TBool
    | TString
    | Void
    | TList Type
    | AnonFun Type [TypeOrRef]
  deriving (Eq, Ord, Show, Read)

data TypeOrRef = TypeOrRefType Type | TypeOrRefRef Type
  deriving (Eq, Ord, Show, Read)

data Expr
    = ListLength Expr
    | ListAt Expr Expr
    | ELambda [Ident] [Arg] Type Block
    | ELitInt Integer
    | EVar Ident
    | ELitTrue
    | ELitFalse
    | EEmptyList Type
    | EString String
    | EApp Expr [ExprOrRef]
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data ExprOrRef = ERExpr Expr | ERRef Ident
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

